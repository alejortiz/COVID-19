radial <- svm(Purchase ~ ., data = oj_train, kernel = "radial", probability = TRUE, cost = tune_oj_radial$best.model$cost)
pred_radial <- predict(radial, newdata = oj_test, probability = TRUE)
poly <- svm(Purchase ~ ., data = oj_train, kernel = "polynomial", probability = TRUE, cost = tune_oj_poly$best.model$cost)
pred_poly <- predict(poly, newdata = oj_test, probability = TRUE)
roc_linear <- tibble(
estimate = pred_linear,
truth = oj_test$Purchase,
prob = attr(pred_linear,"probabilities")[, 1],
Modelo = "Lineal")
roc_radial <- tibble(
estimate = pred_radial,
truth = oj_test$Purchase,
prob = attr(pred_radial,"probabilities")[, 1],
Modelo = "Radial")
roc_poly <- tibble(
estimate = pred_poly,
truth = oj_test$Purchase,
prob = attr(pred_poly,"probabilities")[, 1],
Modelo = "Polinomial")
roc_merge <- rbind(roc_linear, roc_radial, roc_poly)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot() +
labs(title = "Curvas ROC de los modelos SVM con diferente Kernel")
linear <- svm(Purchase ~ ., data = oj_train, kernel = "linear", probability = TRUE, cost = tune_oj$best.model$cost)
pred_linear <- predict(linear, newdata = oj_test, probability = TRUE)
radial <- svm(Purchase ~ ., data = oj_train, kernel = "radial", probability = TRUE, cost = tune_oj_radial$best.model$cost)
pred_radial <- predict(radial, newdata = oj_test, probability = TRUE)
poly <- svm(Purchase ~ ., data = oj_train, kernel = "polynomial", probability = TRUE, cost = tune_oj_poly$best.model$cost)
pred_poly <- predict(poly, newdata = oj_test, probability = TRUE)
roc_linear <- tibble(
estimate = pred_linear,
truth = oj_test$Purchase,
prob = attr(pred_linear,"probabilities")[, 2],
Modelo = "Lineal")
roc_radial <- tibble(
estimate = pred_radial,
truth = oj_test$Purchase,
prob = attr(pred_radial,"probabilities")[, 2],
Modelo = "Radial")
roc_poly <- tibble(
estimate = pred_poly,
truth = oj_test$Purchase,
prob = attr(pred_poly,"probabilities")[, 2],
Modelo = "Polinomial")
linear <- svm(Purchase ~ ., data = oj_train, kernel = "linear", probability = TRUE, cost = tune_oj$best.model$cost)
pred_linear <- predict(linear, newdata = oj_test, probability = TRUE)
radial <- svm(Purchase ~ ., data = oj_train, kernel = "radial", probability = TRUE, cost = tune_oj_radial$best.model$cost)
pred_radial <- predict(radial, newdata = oj_test, probability = TRUE)
poly <- svm(Purchase ~ ., data = oj_train, kernel = "polynomial", probability = TRUE, cost = tune_oj_poly$best.model$cost)
pred_poly <- predict(poly, newdata = oj_test, probability = TRUE)
roc_linear <- tibble(
estimate = pred_linear,
truth = oj_test$Purchase,
prob = attr(pred_linear,"probabilities")[, 1],
Modelo = "Lineal")
roc_radial <- tibble(
estimate = pred_radial,
truth = oj_test$Purchase,
prob = attr(pred_radial,"probabilities")[, 1],
Modelo = "Radial")
roc_poly <- tibble(
estimate = pred_poly,
truth = oj_test$Purchase,
prob = attr(pred_poly,"probabilities")[, 1],
Modelo = "Polinomial")
roc_merge <- rbind(roc_linear, roc_radial, roc_poly)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot() +
labs(title = "Curvas ROC de los modelos SVM con diferente Kernel")
roc_merge %>%
group_by(Modelo) %>%
roc_auc(truth, prob)
linear <- svm(Purchase ~ ., data = oj_train, kernel = "linear", probability = TRUE, cost = tune_oj$best.model$cost)
pred_linear <- predict(linear, newdata = oj_test, probability = TRUE)
radial <- svm(Purchase ~ ., data = oj_train, kernel = "radial", probability = TRUE, cost = tune_oj_radial$best.model$cost)
pred_radial <- predict(radial, newdata = oj_test, probability = TRUE)
poly <- svm(Purchase ~ ., data = oj_train, kernel = "polynomial", probability = TRUE, cost = tune_oj_poly$best.model$cost)
pred_poly <- predict(poly, newdata = oj_test, probability = TRUE)
roc_linear <- tibble(
estimate = pred_linear,
truth = oj_test$Purchase,
prob = attr(pred_linear,"probabilities")[, 2],
Modelo = "Lineal")
roc_radial <- tibble(
estimate = pred_radial,
truth = oj_test$Purchase,
prob = attr(pred_radial,"probabilities")[, 2],
Modelo = "Radial")
roc_poly <- tibble(
estimate = pred_poly,
truth = oj_test$Purchase,
prob = attr(pred_poly,"probabilities")[, 2],
Modelo = "Polinomial")
roc_merge <- rbind(roc_linear, roc_radial, roc_poly)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot() +
labs(title = "Curvas ROC de los modelos SVM con diferente Kernel")
roc_merge %>%
group_by(Modelo) %>%
roc_auc(truth, prob)
library(tidyverse)
library(lubridate)
library(gganimate)
library(RSocrata)
library(grid)
library(gghighlight)
library(ggforce)
library(plotly)
library(ggpmisc)
theme_set(theme_bw())
raw_data <- read.socrata("https://www.datos.gov.co/resource/gt2j-8ykr.csv") %>%
as_tibble()
antioquia_model <- read_csv("Fuentes/model_data.csv")
covid <- raw_data %>%
mutate(fecha_de_diagn_stico = dmy(fecha_de_diagn_stico))
cumulative <- covid %>%
group_by(fecha_de_diagn_stico, departamento) %>%
summarize(n = n()) %>%
group_by(departamento) %>%
mutate(acum = cumsum(n)) %>%
ungroup()
cumulative
national_cases <- cumulative %>%
filter(departamento %in% c("ANTIOQUIA", "CUNDINAMARCA", "CARTAGENA D.T. Y C", "VALLE DEL CAUCA", "BOGOTÁ D.C.")) %>%
ggplot(aes(x = fecha_de_diagn_stico, y = acum, color = departamento)) +
geom_line(size = 1) +
geom_point(size = 2) +
geom_vline(xintercept = as.numeric(ymd("2020-03-24")), linetype = 4, color = "black") +
scale_x_date(date_breaks = "5 days", date_labels = "%d %b") +
scale_y_continuous(breaks = seq(from = 0, to = 1200, by = 200)) +
theme(legend.position = "bottom",
legend.spacing.x = unit(1, "cm"),
axis.text.x = element_text(angle = 20, size = 14),
axis.text.y = element_text(size = 14),
title = element_text(size = 16, face = "bold", family = "sans"),
legend.text = element_text(size = 12, margin = margin(r = 30, unit = "pt")),
plot.title = element_text(hjust = 0.5)) +
#gghighlight(departamento == "ANTIOQUIA") +
labs(title = "COVID-19: Evolución de casos acumulados por departamento",
subtitle = "Fuente: Instituto Nacional de Salud (15/04/2020)",
x = NULL,
y = NULL,
color = NULL)
national_cases
antioquia
antioquia <- cumulative %>%
filter(departamento == "ANTIOQUIA",
acum > 200)
antioquia
colors <- c("acum" = "black", "infectionsS1" = "darkblue", "infectionsS2" ="darkorange", "infectionsS3" = "darkred", "n" = "grey")
tidy_antioquia <- antioquia_model %>%
mutate(fecha_de_diagn_stico = seq.Date(from = ymd("2020-04-07"), to = ymd("2021-04-07"), by = 1)) %>%
left_join(antioquia, by = "fecha_de_diagn_stico") %>%
pivot_longer(cols = c("infectionsS1", "infectionsS2", "infectionsS3", "n", "acum"))
models_plot <- tidy_antioquia %>%
filter(name != "n") %>%
ggplot(aes(fecha_de_diagn_stico, value, color = name)) +
geom_line() +
geom_point() +
scale_color_manual(values = colors, labels = c("Casos confirmados",
"Escenario pesimista (30%)",
"Escenario intermedio (45%)",
"Escenario optimista (60%)")) +
facet_zoom(xlim = c(ymd("2020-04-01"), ymd("2020-04-30")),
ylim = c(0, 500)) +
theme(axis.text.y = element_text(size = 14),
title = element_text(size = 16, face = "bold", family = "sans"),
legend.position = "bottom",
legend.text = element_text(size = 14, margin = margin(r = 40, unit = "pt")),
plot.title = element_text(hjust = 0.5)
) +
labs(title = "COVID-19: Antioquia - Modelo SIR - Población susceptible: 6.355.502",
subtitle = "Fuente casos confirmados: Instituto Nacional de Salud (15/04/2020)",
x = NULL,
y = NULL,
color = NULL)
antioquia <- cumulative %>%
filter(departamento == "ANTIOQUIA",
acum > 200)
colors <- c("acum" = "black", "infectionsS1" = "darkblue", "infectionsS2" ="darkorange", "infectionsS3" = "darkred", "n" = "grey")
antioquia <- cumulative %>%
filter(departamento == "ANTIOQUIA",
acum > 200)
colors <- c("acum" = "black", "infectionsS1" = "darkblue", "infectionsS2" ="darkorange", "infectionsS3" = "darkred", "n" = "grey")
tidy_antioquia <- antioquia_model %>%
mutate(fecha_de_diagn_stico = seq.Date(from = ymd("2020-04-07"), to = ymd("2021-04-07"), by = 1)) %>%
left_join(antioquia, by = "fecha_de_diagn_stico") %>%
pivot_longer(cols = c("infectionsS1", "infectionsS2", "infectionsS3", "n", "acum"))
raw_data <- read.socrata("https://www.datos.gov.co/resource/gt2j-8ykr.csv") %>%
as_tibble()
antioquia_model <- read_csv("Fuentes/model_data.csv")
covid <- raw_data %>%
mutate(fecha_de_diagn_stico = dmy(fecha_de_diagn_stico))
cumulative <- covid %>%
group_by(fecha_de_diagn_stico, departamento) %>%
summarize(n = n()) %>%
group_by(departamento) %>%
mutate(acum = cumsum(n)) %>%
ungroup()
antioquia <- cumulative %>%
filter(departamento == "ANTIOQUIA",
acum > 200)
colors <- c("acum" = "black", "infectionsS1" = "darkblue", "infectionsS2" ="darkorange", "infectionsS3" = "darkred", "n" = "grey")
tidy_antioquia <- antioquia_model %>%
mutate(fecha_de_diagn_stico = seq.Date(from = ymd("2020-04-07"), to = ymd("2021-04-07"), by = 1)) %>%
left_join(antioquia, by = "fecha_de_diagn_stico") %>%
pivot_longer(cols = c("infectionsS1", "infectionsS2", "infectionsS3", "n", "acum"))
models_plot <- tidy_antioquia %>%
filter(name != "n") %>%
ggplot(aes(fecha_de_diagn_stico, value, color = name)) +
geom_line() +
geom_point() +
scale_color_manual(values = colors, labels = c("Casos confirmados",
"Escenario pesimista (30%)",
"Escenario intermedio (45%)",
"Escenario optimista (60%)")) +
facet_zoom(xlim = c(ymd("2020-04-01"), ymd("2020-04-30")),
ylim = c(0, 500)) +
theme(axis.text.y = element_text(size = 14),
title = element_text(size = 16, face = "bold", family = "sans"),
legend.position = "bottom",
legend.text = element_text(size = 14, margin = margin(r = 40, unit = "pt")),
plot.title = element_text(hjust = 0.5)
) +
labs(title = "COVID-19: Antioquia - Modelo SIR - Población susceptible: 6.355.502",
subtitle = "Fuente casos confirmados: Instituto Nacional de Salud (15/04/2020)",
x = NULL,
y = NULL,
color = NULL)
tidy_antioquia <- antioquia_model %>%
mutate(fecha_de_diagn_stico = seq.Date(from = ymd("2020-04-07"), to = ymd("2021-04-07"), by = 1)) %>%
left_join(antioquia, by = "fecha_de_diagn_stico") %>%
pivot_longer(cols = c("infectionsS1", "infectionsS2", "infectionsS3", "n", "acum"))
setwd("~/GitHub/COVID-19")
raw_data <- read.socrata("https://www.datos.gov.co/resource/gt2j-8ykr.csv") %>%
as_tibble()
antioquia_model <- read_csv("Fuentes/model_data.csv")
covid <- raw_data %>%
mutate(fecha_de_diagn_stico = dmy(fecha_de_diagn_stico))
cumulative <- covid %>%
group_by(fecha_de_diagn_stico, departamento) %>%
summarize(n = n()) %>%
group_by(departamento) %>%
mutate(acum = cumsum(n)) %>%
ungroup()
tidy_antioquia <- antioquia_model %>%
mutate(fecha_de_diagn_stico = seq.Date(from = ymd("2020-04-07"), to = ymd("2021-04-07"), by = 1)) %>%
left_join(antioquia, by = "fecha_de_diagn_stico") %>%
pivot_longer(cols = c("infectionsS1", "infectionsS2", "infectionsS3", "n", "acum"))
models_plot <- tidy_antioquia %>%
filter(name != "n") %>%
ggplot(aes(fecha_de_diagn_stico, value, color = name)) +
geom_line() +
geom_point() +
scale_color_manual(values = colors, labels = c("Casos confirmados",
"Escenario pesimista (30%)",
"Escenario intermedio (45%)",
"Escenario optimista (60%)")) +
facet_zoom(xlim = c(ymd("2020-04-01"), ymd("2020-04-30")),
ylim = c(0, 500)) +
theme(axis.text.y = element_text(size = 14),
title = element_text(size = 16, face = "bold", family = "sans"),
legend.position = "bottom",
legend.text = element_text(size = 14, margin = margin(r = 40, unit = "pt")),
plot.title = element_text(hjust = 0.5)
) +
labs(title = "COVID-19: Antioquia - Modelo SIR - Población susceptible: 6.355.502",
subtitle = "Fuente casos confirmados: Instituto Nacional de Salud (15/04/2020)",
x = NULL,
y = NULL,
color = NULL)
models_plot
cumulative
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(sum(acum))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum))
library(tsibble)
library(fable)
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
model(NNETAR(acumulado ~ .))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
model(NNETAR(acumulado ~ .))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
model(NNETAR(acumulado ~ fecha_de_diagn_stico))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
model(fable::ETS(acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
model(fable::ETS(acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(0)
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(sum(acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps((acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(gaps = sum(acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(acumulado = sum(acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(acumulado = (acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(acumulado = (acumulado)-1)
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps(acumulado = 0)
library(zoo)
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
predict()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = 15)
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = 15) %>%
autoplot()
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = 15) %>%
autoplot(cumulative)
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = 15) %>%
autoplot(filter(cumulative))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = "15 days") %>%
autoplot(filter(cumulative,  fecha_de_diagn_stico > dmy("2020-03-01")))
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = "15 days") %>%
autoplot(filter(cumulative,  fecha_de_diagn_stico > ymd("2020-03-01")))
ymd("2020-03-01")
cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE)) %>%
model(fable::ETS(acumulado)) %>%
forecast(h = "15 days")
cumulative
ts_data <- cumulative %>%
group_by(fecha_de_diagn_stico) %>%
summarize(acumulado = sum(acum)) %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(acumulado = na.locf(acumulado, fromLast = TRUE))
ts_data %>%
model(fable::ETS(acumulado)) %>%
forecast(h = "15 days") %>%
autoplot(filter(ts_data,  fecha_de_diagn_stico > ymd("2020-03-01")))
ts_data %>%
model(fable::ETS(acumulado),
arima = ARIMA(acumulado)) %>%
forecast(h = "15 days") %>%
autoplot(filter(ts_data,  fecha_de_diagn_stico > ymd("2020-03-01")))
ts_data %>%
model(fable::ETS(acumulado),
arima = ARIMA(acumulado)) %>%
forecast(h = "15 days") %>%
autoplot(filter(ts_data,  fecha_de_diagn_stico > ymd("2020-03-01")), level = NULL)
ts_data %>%
model(fable::ETS(acumulado),
arima = ARIMA(acumulado),
nnetar = NNETAR(acumulado)) %>%
forecast(h = "15 days") %>%
autoplot(filter(ts_data,  fecha_de_diagn_stico > ymd("2020-03-01")), level = NULL)
ts_data %>%
model(fable::ETS(acumulado),
arima = ARIMA(acumulado),
fable::TSLM(acumulado ~trend() + season())) %>%
forecast(h = "15 days") %>%
autoplot(filter(ts_data,  fecha_de_diagn_stico > ymd("2020-03-01")), level = NULL)
ts_data %>%
model(ets = fable::ETS(acumulado),
arima = ARIMA(acumulado),
linear = fable::TSLM(acumulado ~trend() + season())) %>%
forecast(h = "15 days") %>%
autoplot(filter(ts_data,  fecha_de_diagn_stico > ymd("2020-03-01")), level = NULL)
